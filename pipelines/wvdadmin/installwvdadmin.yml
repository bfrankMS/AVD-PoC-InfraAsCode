# description:  will install WVDAdmin tool (3rd party) on jumhost
# dependson: - requirements - SP in keyvault, jumphost must exist.
# owner: bfrank
#########################

name: 'AVD PoC Install WVDAdmin on jumphost pipeline'

parameters:
  - name: groupSelection
    displayName: Deployment environment variable file to use
    type: string
    values:
    - ..\yourenvfile.pipeline.variables.yml
    #- ..\otherenvironment.pipeline.variables.yml            # modify, rename and uncomment if 2nd... environment file


variables:
 - template: ${{ parameters.groupSelection }} #based on user input (see parameter above) we select the ...variables.yml file which defines the target environment 
  
trigger: none

stages:
  - stage: Publish
    displayName: Publish
    jobs:
      - job: PublishJob
        displayName: Copy and publish artefacts
        steps:
          - task: CopyFiles@2
            displayName: Copy ARM templates
            inputs:
              sourceFolder: pipelines/wvdadmin
              contents: |
                **/pipelines/wvdadmin/setupartefacts/**
                **/wvdadmin/setupartefacts/**
                **/setupartefacts/**
                **\pipelines\wvdadmin\setupartefacts\**
                **\wvdadmin\setupartefacts\**
                **\setupartefacts\**
                *.json
              targetFolder: $(Build.ArtifactStagingDirectory)/${{ variables.artifactDropName }}
          - task: PublishPipelineArtifact@1
            displayName: Publish artefacts
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/${{ variables.artifactDropName }}"
              artifact: ${{ variables.artifactDropName }}


  - stage: DeployARM
    displayName: ARM Deployments
    jobs:
      - job:
        displayName: Deploy WVDAdmin on jumphost
      - deployment: Deploy
        environment: $(azureResourceManagerConnection)
        pool:
          vmImage: windows-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureResourceGroupDeployment@2
                  displayName: Deploy storage account for WVDAdmin setup artefacts (PowerShell scripts) via ARM template
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    action: "Create Or Update Resource Group"
                    resourceGroupName: $(rgForSharedResources)
                    location: $(location)
                    templateLocation: "Linked artifact"
                    csmFile: $(Pipeline.Workspace)/${{ variables.artifactDropName }}/artefactsstorageaccount.json
                    overrideParameters: '-saPrefix "$(saPrefix)"'
                    deploymentOutputs: "armOutputs"
              
                - task: PowerShell@2
                  displayName: Prepare pipeline variables - SAS token to storage account
                  inputs:
                    targetType: "inline"
                    script: |
                      # Write your PowerShell commands here.
                      $var=ConvertFrom-Json '$(armOutputs)'
                      $value=$var.saName.value

                      Write-Host "storage account variable"
                      Write-Host "##vso[task.setvariable variable=SANAME;]$value"

                      $sasvalue=$var.serviceSas.value

                      Write-Host "SAS token from ARM output stored in variable SAS"
                      Write-Host "##vso[task.setvariable variable=SAS;]$sasvalue"

                - task: AzureFileCopy@4
                  displayName: Copy setup artefacts to storage account
                  inputs:
                    SourcePath: "$(Pipeline.Workspace)/${{ variables.artifactDropName }}/setupartefacts"
                    azureSubscription: $(azureResourceManagerConnection)
                    Destination: "AzureBlob"
                    storage: $(SANAME)
                    ContainerName: setupartefacts
                    cleanTargetBeforeCopy: true

                - task: AzurePowerShell@5
                  displayName: Install wvdadmin using custom script extensions
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                      #trimming for more fault tolerance from user input
                      $vmName = "$(vmName)".Trim()
                      
                      write-output "adding wvdadmin on: $vmName"
                      $URI = "https://$(SANAME).blob.core.windows.net/setupartefacts/setupartefacts/cse_installwvdadmin.ps1?$(SAS)"
                      #write-output "$URI"

                      "Get-AzResource -Name ""$vmName"""
                      Get-AzResource -Name "$vmName"

                      Get-AzResource -Name $vmName #-ResourceType 'Microsoft.Compute/virtualMachines' -verbose
                      $vmres = Get-AzResource -Name $vmName -ResourceType 'Microsoft.Compute/virtualMachines'
                      $vmres
                      "$($vmres.ResourceGroupName)"

                      "get service principal secrets from keyvault $(keyvaultname)"
                      "=================="
                      $appid =  Get-AzKeyVaultSecret -VaultName "$(keyvaultname)" -Name "spappid" -AsPlainText
                      $tenantid =  Get-AzKeyVaultSecret -VaultName "$(keyvaultname)" -Name "tenantid" -AsPlainText
                      $password =  Get-AzKeyVaultSecret -VaultName "$(keyvaultname)" -Name "sppassword" -AsPlainText

                      $arguments = "-AzureTenantId ""$tenantid"" -ServicePrincipalId ""$appid"" -ServicePrincipalKey ""$password"""
                      #Write-Output "with arguments: $arguments" #beware of non escaped outputs

                      #take the params from the config file.
                      Set-AzVMCustomScriptExtension -Name 'wvdadmin' -VMName $vmName -ResourceGroupName "$(rgForSharedResources)" -Location "$(location)" -Run './setupartefacts/cse_installwvdadmin.ps1' -FileUri "$URI" -Argument "$arguments"
                      Remove-AzVMCustomScriptExtension -Name 'wvdadmin' -VMName $vmName -ResourceGroupName "$(rgForSharedResources)" -Force
                                          
                      #as this is currently failing...
                      # see https://github.com/Azure/azure-powershell/issues/8243
                      #Get-AzResource -Name $vmName -ResourceType 'Microsoft.Compute/virtualMachines' -verbose # not returning anything
                      #$vmres = Get-AzResource -Name $vmName -ResourceType 'Microsoft.Compute/virtualMachines'
                      #$vmres
                      #"$($vmres.ResourceGroupName)"
                      #Set-AzVMCustomScriptExtension -Name wvadmin -VMName $vmName -ResourceGroupName "$($vmres.ResourceGroupName)" -Location "$($vmres.Location)" -Run './setupartefacts/cse_installwvdadmin.ps1' -FileUri "$URI" -Argument "$arguments"
                      #Remove-AzVMCustomScriptExtension -Name wvadmin -VMName $vmName -ResourceGroupName "$($vmres.ResourceGroupName)" -Force
