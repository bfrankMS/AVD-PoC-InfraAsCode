packer {
  required_plugins {
    windows-update = {
      version = "0.12.0"
      source = "github.com/rgl/windows-update"
            }
        }
  }
variable "client_id" {
  type =  string
}
variable "client_secret" {
  type =  string
  sensitive = true
}
variable "rg_name" {
  type =  string
}
variable "rg_location" {
  type =  string
}
variable "subscription_id" {
  type =  string
}
variable "tenant_id" {
  type =  string
}
variable "managed_image_name" {
  type =  string
  default = "mypackertemplate"
}
variable "softwarezip_uri" {
  type =  string
}
variable "installps1_uri" {
  type =  string
}

source "azure-arm" "autogenerated_1" {
  azure_tags = {
    Environment = "PoC"
    Service = "AVD"
    Story = "packer"
  }
  client_id                          = "${var.client_id}"
  client_secret                      = "${var.client_secret}"
  communicator                       = "winrm"
  image_offer                        = "Windows-10"
  image_publisher                    = "MicrosoftWindowsDesktop"
  image_sku                          = "20h2-evd"
  image_version                      = "latest"
  location                           = "${var.rg_location}"
  managed_image_name                 = "${var.managed_image_name}"
  managed_image_resource_group_name  = "${var.rg_name}"
  managed_image_storage_account_type = "Premium_LRS"
  os_type                            = "Windows"
  subscription_id                    = "${var.subscription_id}"
  tenant_id                          = "${var.tenant_id}"
  vm_size                            = "Standard_DS2_v2"
  winrm_insecure                     = true
  winrm_timeout                      = "5m"
  winrm_use_ssl                      = true
  winrm_username                     = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "powershell" {
    inline = [
      "New-Item -Path c:\\temp -Type Directory -Force",
      "Start-Transcript c:\\temp\\mypacker.log -Force",
      "\"Started: {0}\" -f [System.DateTime]::Now.ToString('dd.MM.yyyy HH:mm:ss.fff')",
      "invoke-webrequest -uri 'https://aka.ms/downloadazcopy-v10-windows' -OutFile 'c:\\temp\\azcopy.zip' -verbose",
      "Expand-Archive 'c:\\temp\\azcopy.zip' 'c:\\temp' -force -verbose",
      "copy-item 'C:\\temp\\azcopy_windows_amd64_*\\azcopy.exe\\' -Destination 'c:\\temp' -verbose",
      "c:\\temp\\azcopy.exe copy \"${var.softwarezip_uri}\" c:\\temp\\software.zip",
      "Expand-Archive 'c:\\temp\\software.zip' c:\\temp\\software -force -verbose",
      "c:\\temp\\azcopy.exe copy \"${var.installps1_uri}\" c:\\temp\\install.ps1",
      " \"launch install.ps1\" ",
      ". c:\\temp\\install.ps1",
      "\"Install.ps1 End: {0}\" -f [System.DateTime]::Now.ToString('dd.MM.yyyy HH:mm:ss.fff')",
      "Stop-Transcript "
      ]
  }
  provisioner "windows-update" {
    search_criteria = "IsInstalled=0"
    filters = [
      "exclude:$_.Title -like '*Preview*'",
      "include:$true",
    ]
    update_limit = 25
  }
  provisioner "powershell" {
    inline = [
      "Start-Transcript c:\\temp\\mypacker.log -Force -Append",
      "\"Sysprep start: {0}\" -f [System.DateTime]::Now.ToString('dd.MM.yyyy HH:mm:ss.fff')",
      "& c:\\windows\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit /mode:vm", 
      "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }",
      "Stop-Transcript "
      ]
  }
}
