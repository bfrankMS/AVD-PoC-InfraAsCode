# description:  will create a vm with a domain (see variable file) and a jump host in
# dependson: Networking pipeline needs to be run befor this!
# owner: bfrank
#########################

name: 'AVD PoC ClassicDCandJumpHost pipeline'

parameters:
  - name: groupSelection
    displayName: add and select your environment variable file (classicdcandjumphost.yml)
    type: string
    values:
    - ..\yourenvfile.pipeline.variables.yml
    #- ..\otherenvironment.pipeline.variables.yml            # modify, rename and uncomment if 2nd... environment file
  - name: adminAccount
    default: avdadmin
  - name: adminPassword
    type: string

variables:
 - template: ${{ parameters.groupSelection }} #based on user input (see parameter above) we select the ...variables.yml file which defines the target environment 

trigger: none

stages:
  - stage: Publish
    displayName: Publish
    jobs:
      - job: PublishJob
        displayName: Copy and publish artefacts
        steps:
          - task: CopyFiles@2
            displayName: Copy ARM templates
            inputs:
              sourceFolder: pipelines/requirements
              contents: |
                **/pipelines/requirements/setupartefacts/**
                **/requirements/setupartefacts/**
                **/setupartefacts/**
                **\pipelines\requirements\setupartefacts\**
                **\requirements\setupartefacts\**
                **\setupartefacts\**
                *.json
              targetFolder: $(Build.ArtifactStagingDirectory)/${{ variables.artifactDropName }}
          - task: PublishPipelineArtifact@1
            displayName: Publish artefacts
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/${{ variables.artifactDropName }}"
              artifact: ${{ variables.artifactDropName }}

  - stage: DeployARM
    displayName: ARM Deployments
    jobs:
      - job:
        displayName: Deploy ClassicDCandJumpHost RGs and network
      - deployment: Deploy
        environment: $(azureResourceManagerConnection)
        pool:
          vmImage: windows-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzurePowerShell@5
                  displayName: Deploy resource groups using ARM template
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                      $templateParameterObject = @{
                      'rgNames' =  [array]"$(rgNames)" -split ',' | % {$_.Trim()}
                      }
                      $templateParameterObject
                      $deploymentName = "rgdeployment$([System.DateTime]::Now.ToString('ddMMyyHHmm'))"
                      New-AzSubscriptionDeployment -Name "$deploymentName" -Location "$(location)" -TemplateParameterObject $templateParameterObject -TemplateFile "$(Pipeline.Workspace)/${{ variables.artifactDropName }}/createresourcegroups.json" -verbose

                - task: AzurePowerShell@5
                  displayName: Deploy network using ARM template
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                      $sn = "$(subnetsName)" -split ',' | % {$_.Trim()}
                      $ap = "$(subnetsAddressPrefix)" -split ',' | % {$_.Trim()}
                      $subnets = @()
                      for ($i = 0; $i -lt $sn.count; $i++)
                      { 
                          Write-host "$($sn[$i].Trim()) - $($ap[$i].Trim())"
                          $subnets +=  @{ name= "$($sn[$i].Trim())" ; addressPrefix = "$($ap[$i].Trim())" }
                      }
                      $subnets | ConvertTo-Json

                      $templateParameterObject = @{
                      'vnetName' = [string]"$(vnetName)"
                      'subnets' = [array]$subnets
                      }
                      $templateParameterObject
                      $deploymentName = "networkdeployment$([System.DateTime]::Now.ToString('ddMMyyHHmm'))"
                      New-AzResourceGroupDeployment -Name "$deploymentName" -ResourceGroupName "$(rgForSharedResources)" -Mode Incremental -TemplateParameterObject $templateParameterObject -TemplateFile "$(Pipeline.Workspace)/${{ variables.artifactDropName }}/avdpocnetwork.json" -verbose

                - task: AzureResourceGroupDeployment@2
                  displayName: Deploy storage account for setup artefacts (PowerShell scripts) via ARM template
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    action: "Create Or Update Resource Group"
                    resourceGroupName: $(rgForSharedResources)
                    location: $(location)
                    templateLocation: "Linked artifact"
                    csmFile: $(Pipeline.Workspace)/${{ variables.artifactDropName }}/artefactsstorageaccount.json
                    overrideParameters: '-saPrefix "$(saPrefix)"'
                    deploymentOutputs: "armOutputs"

                - task: PowerShell@2
                  displayName: Prepare pipeline variables - SAS token to storage account
                  inputs:
                    targetType: "inline"
                    script: |
                      # Write your PowerShell commands here.
                      $var=ConvertFrom-Json '$(armOutputs)'
                      $value=$var.saName.value

                      Write-Host "storage account variable"
                      Write-Host "##vso[task.setvariable variable=SANAME;]$value"

                      $sasvalue=$var.serviceSas.value

                      Write-Host "SAS token from ARM output stored in variable SAS"
                      Write-Host "##vso[task.setvariable variable=SAS;]$sasvalue"

                - task: AzureFileCopy@4
                  displayName: Copy setup artefacts to storage account
                  inputs:
                    SourcePath: "$(Pipeline.Workspace)/${{ variables.artifactDropName }}/setupartefacts"
                    azureSubscription: $(azureResourceManagerConnection)
                    Destination: "AzureBlob"
                    storage: $(SANAME)
                    ContainerName: setupartefacts
                    cleanTargetBeforeCopy: true

                - task: AzurePowerShell@5
                  displayName: Deploy DC using ARM template
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                      $URI = "https://$(SANAME).blob.core.windows.net/setupartefacts/setupartefacts/cse_ad_post.ps1?$(SAS)"
                      
                      $templateParameterObject = @{
                      'dcName' = [string]"$(dcName)"
                      'adminUser' = [string]"${{ parameters.adminAccount }}"
                      'adminPassword' = [securestring]$(ConvertTo-SecureString "${{ parameters.adminPassword }}" -AsPlainText -Force)
                      'dcSize' = [string]"$(dcSize)"
                      'diskSku' = [string]"$(diskSku)"
                      'domainName' = [string]"$(domainName)"
                      'vnetName' = [string]"$(vnetName)"
                      'dcSubnet' = [string]"$(dcSubnet)"
                      'dcIP' = [string]"$(dcIP)"
                      'SAS' = [string]"$(SAS)"
                      'SANAME' = [string]"$(SANAME)"
                      }
                      $templateParameterObject
                      $deploymentName = "dcdeployment$([System.DateTime]::Now.ToString('ddMMyyHHmm'))"
                      New-AzResourceGroupDeployment -Name "$deploymentName" -ResourceGroupName "$(rgForSharedResources)" -Mode Incremental -TemplateParameterObject $templateParameterObject -TemplateFile "$(Pipeline.Workspace)/${{ variables.artifactDropName }}/classicdc.json" -verbose

                - task: AzureCLI@2
                  displayName: make sure DC is new DNS server in this VNET
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: "az network vnet update -g '$(rgForSharedResources)' -n '$(vnetName)' --dns-servers $(dcIP)"

                - task: AzurePowerShell@5
                  displayName: reboot DC and wait for AD DS services
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                      #Restart the DC
                      Restart-AzVM -Name "$(dcName)" -ResourceGroupName "$(rgForSharedResources)"
                                  
                      #wait for domain services to come online they may take a while to start up so query the service from within the vm.
                      $tempFile = "AzVMRunCommand"+ $("{0:D4}" -f (Get-Random -Maximum 9999))+".tmp.ps1"
                                  
                      $code = @"
                          if (`$(Get-Service ADWS).Status -eq 'Running'){
                          "ADWS is Running"
                          }
                      "@
                      $code | Out-File $tempFile    #write this Powershell code into a local file 
                        
                      do
                      {
                        write-output "wait for AD services"    
                        $result = Invoke-AzVMRunCommand -ResourceGroupName "$(rgForSharedResources)" -Name "$(dcName)"  -CommandId 'RunPowerShellScript' -ScriptPath $tempFile
                        Start-Sleep -Seconds 30
                      }
                      until ($result.Value.Message -contains "ADWS is Running")

                - task: AzurePowerShell@5
                  displayName: Deploy jumphost using ARM template
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                      $templateParameterObject = @{
                      'vmName' = [string]"$(vmName)"
                      'adminUser' = [string]"${{ parameters.adminAccount }}"
                      'adminPassword' = [securestring]$(ConvertTo-SecureString "${{ parameters.adminPassword }}" -AsPlainText -Force)
                      'vmSize' = [string]"$(vmSize)"
                      'diskSku' = [string]"$(diskSku)"
                      'domainName' = [string]"$(domainName)"
                      'vnetName' = [string]"$(vnetName)"
                      'vmSubnet' = [string]"$(vmSubnet)"
                      }
                      $templateParameterObject
                      $deploymentName = "jumphostdeployment$([System.DateTime]::Now.ToString('ddMMyyHHmm'))"
                      New-AzResourceGroupDeployment -Name "$deploymentName" -ResourceGroupName "$(rgForSharedResources)" -Mode Incremental -TemplateParameterObject $templateParameterObject -TemplateFile "$(Pipeline.Workspace)/${{ variables.artifactDropName }}/jumphost.json" -verbose

                - task: AzurePowerShell@5
                  displayName: Customize DC and Jumphost with custom script extensions
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                      write-output "remove 'DCInstall' extension"
                      Remove-AzVMCustomScriptExtension -Name 'DCInstall' -VMName "$(dcName)" -ResourceGroupName "$(rgForSharedResources)" -Force  

                      $URI = "https://$(SANAME).blob.core.windows.net/setupartefacts/setupartefacts/cse_ad_post.ps1?$(SAS)"
                      write-output "$URI"

                      $arguments = "-AVDUsersPassword ${{ parameters.adminPassword }} -OUName AVD"
                      write-output "Do post AD installation steps: e.g. create OUs and some AVD Demo Users."
                      Set-AzVMCustomScriptExtension -Name 'PostDCActions' -VMName "$(dcName)" -ResourceGroupName "$(rgForSharedResources)" -Location "$(location)" -Run './setupartefacts/cse_ad_post.ps1' -Argument "$arguments" -FileUri "$URI"

                      write-output "Remove DC CSE"
                      Remove-AzVMCustomScriptExtension -Name 'PostDCActions' -VMName "$(dcName)" -ResourceGroupName "$(rgForSharedResources)" -Force -NoWait

                      $URI = "https://$(SANAME).blob.core.windows.net/setupartefacts/setupartefacts/cse_fs.ps1?$(SAS)"
                      write-output "$URI"

                      write-output "Customize jumphost"
                      Set-AzVMCustomScriptExtension -Name 'FileServerInstall' -VMName "$(vmName)" -ResourceGroupName "$(rgForSharedResources)" -Location "$(location)" -Run './setupartefacts/cse_fs.ps1' -FileUri "$URI"

                      write-output "Remove jumphost CSE"
                      Remove-AzVMCustomScriptExtension -Name 'FileServerInstall' -VMName "$(vmName)" -ResourceGroupName "$(rgForSharedResources)" -Force
