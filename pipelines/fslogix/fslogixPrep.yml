# description:  will create a storage account with premium file share to hold the fslogix profile disks
# dependson: - requirements - classic domain needs to be available.
#            + AAD sync must be in place.
# owner: bfrank
#########################

name: 'AVD PoC FSLogix with classic DC pipeline'

parameters:
  - name: groupSelection
    displayName: Deployment environment variable file to use
    type: string
    values:
    - ..\bfrankcsp.pipeline.variables.yml
    - ..\bfrankvs.pipeline.variables.yml
    # - ..\yourenvfile.pipeline.variables.yml         # modify, rename and uncomment your environment file

variables:
 - template: ${{ parameters.groupSelection }} #based on user input (see parameter above) we select the ...variables.yml file which defines the target environment 
  
trigger: none

stages:
  - stage: Publish
    displayName: Publish
    jobs:
      - job: PublishJob
        displayName: Copy and publish artefacts
        steps:
          - task: CopyFiles@2
            displayName: Copy ARM templates
            inputs:
              sourceFolder: pipelines/fslogix
              contents: |
                **/pipelines/fslogix/setupartefacts/**
                **/fslogix/setupartefacts/**
                **/setupartefacts/**
                **\pipelines\fslogix\setupartefacts\**
                **\fslogix\setupartefacts\**
                **\setupartefacts\**
                *.json
              targetFolder: $(Build.ArtifactStagingDirectory)/${{ variables.artifactDropName }}
          - task: PublishPipelineArtifact@1
            displayName: Publish artefacts
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/${{ variables.artifactDropName }}"
              artifact: ${{ variables.artifactDropName }}

  - stage: DeployARM
    displayName: ARM Deployments
    jobs:
      - job:
        displayName: Deploy Azure premium fileshare for FSLogix profiles
      - deployment: Deploy
        environment: $(azureResourceManagerConnection)
        pool:
          vmImage: windows-latest
          
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureResourceGroupDeployment@2
                  displayName: Deploy Azure premium file share via ARM template
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    action: "Create Or Update Resource Group"
                    resourceGroupName: $(rgFSLogixResources)
                    location: $(locationFSLogix)
                    templateLocation: "Linked artifact"
                    csmFile: $(Pipeline.Workspace)/${{ variables.artifactDropName }}/premiumfileshare.json
                    overrideParameters: '-saPrefix "$(saFSLogixPrefix)" -shareName "$(shareName)" -location "$(locationFSLogix)"'
                    deploymentOutputs: "armOutputs"
                - task: PowerShell@2
                  displayName: Prepare pipeline variables - SAS token to storage account
                  inputs:
                    targetType: "inline"
                    script: |
                      # Write your PowerShell commands here.
                      $var=ConvertFrom-Json '$(armOutputs)'
                      $saName=$var.saName.value

                      Write-Host "storage account name"
                      Write-Host "##vso[task.setvariable variable=SANAME;]$saName"

                      $shareName=$var.shareName.value

                      Write-Host "profile share name"
                      Write-Host "##vso[task.setvariable variable=SHARENAME;]$shareName"

                      $sakey=$var.sakey.value

                      Write-Host "storage account key"
                      Write-Host "##vso[task.setvariable variable=SAKEY;]$sakey"
                - task: AzurePowerShell@5
                  displayName: download AzFilesHybrid on DC vm
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                     # You can write your azure powershell scripts inline here. 
                     # You can also pass predefined and custom variables to this script using arguments
                     write-output "generating script code"
                     
                     $tempFile = "AzVMRunCommand"+ $("{0:D4}" -f (Get-Random -Maximum 9999))+".tmp.ps1"
                                   
                     $code = @"
                     #this will be our temp folder - need it for download / logging
                     `$tmpDir = "c:\temp\" 

                     `$destinationPath = "`$tmpDir\AzFilesHybrid.zip"
                     `$tempPath = "`$tmpDir\AzFilesHybrid"
                     
                     #create folder if it doesn't exist
                     if (!(Test-Path `$tmpDir)) { mkdir `$tmpDir -force }
                     
                     #write a log file with the same name of the script
                     Start-Transcript "`$tmpDir\FSLogixScript1.log"
                     
                     #abort if run before
                     if (`$(Test-Path `$tempPath -PathType Container)){Write-Output "`$tempPath exists...nothing to do...aborting"; exit 3 }
                     
                     #Install Latest Nuget Package Provider
                     Install-PackageProvider Nuget -Force -Verbose
                     
                     #Trust powershell gallery before installing
                     set-psrepository -Name PSGallery -installationpolicy trusted 
                     Install-Module -Name PowerShellGet -Force -verbose
                     
                     #Unload modules to force auto reloading the new ones. 
                     Remove-Module PowerShellGet
                     Remove-Module PackageManagement
                     
                     #install some required azure powershell modules before
                     Install-Module Az.Accounts -Force
                     Install-Module Az.Resources -Force
                     Install-Module Az.Storage -Force
                     Install-Module Az.Network -Force
                     
                     #download module AzFilesHybrid.zip from 
                     # https://github.com/Azure-Samples/azure-files-samples/releases
                     Invoke-WebRequest -Uri 'https://github.com/Azure-Samples/azure-files-samples/releases/download/v0.2.3/AzFilesHybrid.zip' -OutFile `$destinationPath
                     
                     #unzip it
                     Expand-Archive `$destinationPath -DestinationPath `$tempPath -Force
                     
                     #Change the execution policy to unblock importing AzFilesHybrid.psm1 module
                     Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
                     
                     # Navigate to where AzFilesHybrid is unzipped and stored and run to copy the files into your path
                     Set-Location `$tempPath
                     #need to change the default PSModulePath for the AzFilesHybrid module to 'C:\Program Files\WindowsPowerShell\Modules'
                     ((Get-Content -path .\CopyToPSPath.ps1  -Raw) -replace 'PSModulePath.Split\(\";\"\)\[0\]','PSModulePath.Split(";")[1]') | Set-Content -Path .\CopyToPSPath.mod.ps1
                     .\CopyToPSPath.mod.ps1 
                     
                     #Import AzFilesHybrid module
                     Import-Module -Name AzFilesHybrid
                     
                     stop-transcript
                     "@
                     $code | Out-File $tempFile    #write this Powershell code into a local file 

                     write-output "executing script code in dc...might take a while"    
                     Invoke-AzVMRunCommand -ResourceGroupName "$(rgForSharedResources)" -Name "$(dcName)"  -CommandId 'RunPowerShellScript' -ScriptPath $tempFile
                - task: AzurePowerShell@5
                  displayName: execute AzFilesHybrid within DC
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    ScriptType: "InlineScript"
                    errorActionPreference: "stop"
                    azurePowerShellVersion: "LatestVersion"
                    Inline: |
                     # You can write your azure powershell scripts inline here. 
                     # You can also pass predefined and custom variables to this script using arguments
                     write-output "generating script code"
                     
                     $tempFile = "AzVMRunCommand"+ $("{0:D4}" -f (Get-Random -Maximum 9999))+".tmp.ps1"

                     "get service principal secrets from keyvault $(keyvaultname)"
                     "=================="
                     $appid =  Get-AzKeyVaultSecret -VaultName "$(keyvaultname)" -Name "spappid" -AsPlainText
                     $tenantid =  Get-AzKeyVaultSecret -VaultName "$(keyvaultname)" -Name "tenantid" -AsPlainText
                     $password =  Get-AzKeyVaultSecret -VaultName "$(keyvaultname)" -Name "sppassword" -AsPlainText

                     $code = @"
                     #this will be our temp folder - need it for download / logging
                     `$tmpDir = "c:\temp\" 
                     
                     #create folder if it doesn't exist
                     if (!(Test-Path `$tmpDir)) { mkdir `$tmpDir -force }
                     
                     #write a log file with the same name of the script
                     Start-Transcript "`$tmpDir\FSLogixScript2.log"
                     
                     write-output "preparing variables"
                     `$saname = "$(SANAME)"
                     `$sharename = "$(SHARENAME)"
                     `$OUName = "AVD"
                     `$DomainName = "$(domainName)"
                     write-output "joing azure file share using SA:`$saname Share:`$sharename OU:`$OUName Domain:`$DomainName"

                     # Use the application ID as the username, and the secret as password
                     #Now sign in as this service principal
                     `$appId =  "$appid"
                     `$password = "$password"
                     `$tenant = "$tenantid"

                     `$passwd = ConvertTo-SecureString `$password -AsPlainText -Force
                     `$pscredential = New-Object System.Management.Automation.PSCredential(`$appId, `$passwd)
                     Connect-AzAccount -ServicePrincipal -Credential `$pscredential -Tenant `$tenant -verbose
                     
                     #Define parameters
                     `$SubscriptionId =  `$(Get-AzContext).Subscription.Id
                     write-output "subscription is: `$SubscriptionId"
                     `$ResourceGroupName = `$(Get-AzResource -Name `$saname).ResourceGroupName
                     write-output "resource is: `$(Get-AzResource -Name `$saname)"

                     # https://docs.microsoft.com/en-us/azure/storage/files/storage-files-identity-ad-ds-enable                                        
                     # Register the target storage account with your active directory environment under the target OU (for example: specify the OU with Name as "UserAccounts" or DistinguishedName as "OU=UserAccounts,DC=CONTOSO,DC=COM"). 
                     # You can use to this PowerShell cmdlet: Get-ADOrganizationalUnit to find the Name and DistinguishedName of your target OU. If you are using the OU Name, specify it with -OrganizationalUnitName as shown below. If you are using the OU DistinguishedName, you can set it with -OrganizationalUnitDistinguishedName. You can choose to provide one of the two names to specify the target OU.
                     # You can choose to create the identity that represents the storage account as either a Service Logon Account or Computer Account (default parameter value), depends on the AD permission you have and preference. 
                     # Run Get-Help Join-AzStorageAccountForAuth for more details on this cmdlet.
                     
                     #Import AzFilesHybrid module
                     Import-Module -Name AzFilesHybrid -Force
                     
                     #use service account -> will create an account in AD
                     Join-AzStorageAccountForAuth -ResourceGroupName `$ResourceGroupName -Name `$saname -DomainAccountType ComputerAccount -OrganizationalUnitName `$OUName -Domain `$DomainName -OverwriteExistingADObject -verbose
                     
                     #resync pwd just in case account already exists
                     `$sa = Get-AzStorageAccount -ResourceGroupName `$ResourceGroupName -Name `$saname -verbose
                     Update-AzStorageAccountADObjectPassword -StorageAccount `$sa -RotateToKerbKey kerb1 -verbose -Confirm:`$false

                     #check
                     `$storageaccount = Get-AzStorageAccount -ResourceGroupName `$ResourceGroupName -Name `$saname
                     
                     # List the directory domain information if the storage account is enabled for AD authentication for Files
                     Write-Output "AzureFilesIdentityBasedAuth (Expected = 'AD'): `$(`$storageaccount.AzureFilesIdentityBasedAuth.ActiveDirectoryProperties)"
                     
                     
                     #Now we will set the AD permissions on the storage account
                     # sort of equivalent as the 'Share permissions' in old onpremise times.
                     `$FileShareContributorRole = Get-AzRoleDefinition "Storage File Data SMB Share Contributor" 
                     #Use one of the built-in roles: Storage File Data SMB Share Reader, Storage File Data SMB Share Contributor, Storage File Data SMB Share Elevated Contributor
                     `$scope = "/subscriptions/`$SubscriptionId/resourceGroups/`$ResourceGroupName/providers/Microsoft.Storage/storageAccounts/`$saname/fileServices/default/fileshares/`$sharename"
                     
                     `$avdusers = Get-AzADGroup -DisplayName "AVD Users"
                     New-AzRoleAssignment -ObjectId `$avdusers.Id -RoleDefinitionName `$FileShareContributorRole.Name -Scope `$scope
                     
                     #mount the drive using the storage account key. then apply NTFS permissions 
                     `$ackey = (Get-AzStorageAccountKey -ResourceGroupName `$ResourceGroupName -Name `$saname)[0].Value 
                     
                     `$azurefilesURI = "`$saname.file.core.windows.net"
                     `$connectTestResult = Test-NetConnection -ComputerName `$azurefilesURI -Port 445
                     if (`$connectTestResult.TcpTestSucceeded) {
                         # Save the password so the drive will persist on reboot
                         cmd.exe /C "cmdkey /add:""`$saname.file.core.windows.net"" /user:""Azure\`$saname"" /pass:""`$ackey"""
                     
                         # Mount the drive
                         New-PSDrive -Name Z -PSProvider FileSystem -Root "\\`$azurefilesURI\`$sharename" -Persist
                     }
                     else {
                         Write-Error -Message "Unable to reach the Azure storage account via port 445. Check to make sure your organization or ISP is not blocking port 445, or use Azure P2S VPN, Azure S2S VPN, or Express Route to tunnel SMB traffic over a different port."
                     }
                     
                     
                     #1st remove all exiting permissions.
                     `$acl = Get-Acl z:\
                     `$acl.Access | % { `$acl.RemoveAccessRule(`$_) }
                     `$acl.SetAccessRuleProtection(`$true, `$false)
                     `$acl | Set-Acl
                     #add full control for 'the usual suspects'
                     `$users = @("`$DomainName\Domain Admins", "System", "Administrators", "Creator Owner" )
                     foreach (`$user in `$users) {
                         `$new = `$user, "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow"
                         `$accessRule = new-object System.Security.AccessControl.FileSystemAccessRule `$new
                         `$acl.AddAccessRule(`$accessRule)
                         `$acl | Set-Acl 
                     }
                     
                     #add read & write on parent folder ->required for FSLogix - no inheritence
                     `$allowAVD = "AVD Users", "ReadData, AppendData, ExecuteFile, ReadAttributes, Synchronize", "None", "None", "Allow"
                     `$accessRule = new-object System.Security.AccessControl.FileSystemAccessRule `$allowAVD
                     `$acl.AddAccessRule(`$accessRule)
                     `$acl | Set-Acl 
                     
                     #cleanup
                     Remove-PSDrive -Name z -PSProvider FileSystem -Force
                     cmdkey /delete:"`$saname.file.core.windows.net"

                     stop-transcript

                     "@
                     $code | Out-File $tempFile    #write this Powershell code into a local file 

                     write-output "executing script code in dc"    
                     Invoke-AzVMRunCommand -ResourceGroupName "$(rgForSharedResources)" -Name "$(dcName)"  -CommandId 'RunPowerShellScript' -ScriptPath $tempFile
